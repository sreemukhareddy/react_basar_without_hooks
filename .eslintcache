[{"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\index.js":"1","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\App.js":"2","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\reportWebVitals.js":"3","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\UserSignUpPage.js":"4","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\api\\apicalls.js":"5","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\UI\\Spinners.js":"6","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\LoginPage.js":"7","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\HomePage.js":"8","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\UserPage.js":"9","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\Input\\TopBar.js":"10","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\redux\\authReducer.js":"11","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\redux\\authActions.js":"12","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\UserList.js":"13","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\UserListItem.js":"14","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\ProfileCard.js":"15","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\ProfileImageWithDefault.js":"16","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\HoaxSubmit.js":"17","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\Input\\input.js":"18","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\HoaxFeed.js":"19","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\HoaxView.js":"20","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\UI\\Modal.js":"21"},{"size":1436,"mtime":1611939139637,"results":"22","hashOfConfig":"23"},{"size":1048,"mtime":1611938134371,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":4973,"mtime":1611938010143,"results":"26","hashOfConfig":"23"},{"size":2395,"mtime":1613222230441,"results":"27","hashOfConfig":"23"},{"size":251,"mtime":1612936332135,"results":"28","hashOfConfig":"23"},{"size":3135,"mtime":1611937169950,"results":"29","hashOfConfig":"23"},{"size":735,"mtime":1612889526604,"results":"30","hashOfConfig":"23"},{"size":5250,"mtime":1612936762193,"results":"31","hashOfConfig":"23"},{"size":3882,"mtime":1612677158163,"results":"32","hashOfConfig":"23"},{"size":885,"mtime":1612677679463,"results":"33","hashOfConfig":"23"},{"size":808,"mtime":1611939608321,"results":"34","hashOfConfig":"23"},{"size":2109,"mtime":1612250297601,"results":"35","hashOfConfig":"23"},{"size":805,"mtime":1612329916628,"results":"36","hashOfConfig":"23"},{"size":2277,"mtime":1612456496169,"results":"37","hashOfConfig":"23"},{"size":461,"mtime":1613140935445,"results":"38","hashOfConfig":"23"},{"size":4691,"mtime":1613140786776,"results":"39","hashOfConfig":"23"},{"size":281,"mtime":1611716732777,"results":"40","hashOfConfig":"23"},{"size":5908,"mtime":1613226270498,"results":"41","hashOfConfig":"23"},{"size":1834,"mtime":1613225422520,"results":"42","hashOfConfig":"23"},{"size":1453,"mtime":1613224861586,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"10fhiw3",{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"47"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"47"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"47"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\index.js",["96"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport authReducer from \"./redux/authReducer\";\nimport { applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\n// const initialState = {\n//   id: 0,\n//   username: \"username\",\n//   password: \"password\",\n//   displayName: \"display-name\",\n//   image: \"image\",\n//   isLoggedIn: true,\n// };\n\nlet localStorageData = localStorage.getItem(\"hoax-auth\");\n\nlet persistedState = {\n  id: 0,\n  username: \"\",\n  password: \"\",\n  displayName: \"\",\n  image: \"\",\n  isLoggedIn: false,\n  loading: false,\n};\n\nif (localStorageData) {\n  try {\n    persistedState = JSON.parse(localStorageData);\n  } catch (error) {}\n}\n\nconst store = createStore(authReducer, applyMiddleware(thunk));\n\nstore.subscribe(() => {\n  localStorage.setItem(\"hoax-auth\", JSON.stringify(store.getState()));\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["97","98"],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\App.js",["99"],"import \"./App.css\";\nimport UserSignUpPage from \"./pages/UserSignUpPage\";\nimport * as apiCalls from \"./api/apicalls\";\nimport LoginPage from \"./pages/LoginPage\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport UserPage from \"./pages/UserPage\";\nimport TopBar from \"./Input/TopBar\";\n\nfunction App() {\n  return (\n    <div>\n      <TopBar />\n      <div className=\"container\">\n        <Switch>\n          <Route\n            path=\"/login\"\n            exact\n            component={LoginPage}\n            //render={(props) => <LoginPage actions={actions} {...props} />}\n          />\n          <Route\n            path=\"/signup\"\n            exact\n            component={UserSignUpPage}\n            //render={(props) => <UserSignUpPage actions={actions} {...props} />}\n          />\n          <Route path=\"/:username\" exact component={UserPage} />\n          <Route path=\"/\" exact component={HomePage} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\reportWebVitals.js",[],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\UserSignUpPage.js",["100"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as authActions from \"../redux/authActions\";\r\n\r\nexport class UserSignUpPage extends Component {\r\n  state = {\r\n    displayName: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n    repeatPassword: \"\",\r\n    loading: false,\r\n    errors: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"UserSignUpPage componentDidMount\");\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"UserSignUpPage componentDidUpdate\");\r\n  }\r\n\r\n  displayNameHandler = (event) => {\r\n    this.setState({\r\n      displayName: event.target.value,\r\n    });\r\n  };\r\n\r\n  usernameHandler = (event) => {\r\n    this.setState({\r\n      username: event.target.value,\r\n    });\r\n  };\r\n\r\n  passwordHandler = (event) => {\r\n    this.setState({\r\n      password: event.target.value,\r\n    });\r\n  };\r\n\r\n  repeatPasswordHandler = (event) => {\r\n    this.setState({\r\n      repeatPassword: event.target.value,\r\n    });\r\n  };\r\n\r\n  signUpHandler = (event) => {\r\n    event.preventDefault();\r\n    //alert(\"button clicked\");\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    const user = {\r\n      username: this.state.username,\r\n      displayName: this.state.displayName,\r\n      password:\r\n        this.state.password == this.state.repeatPassword\r\n          ? this.state.password\r\n          : null,\r\n    };\r\n    this.props.actions\r\n      .postSignUp(user)\r\n      .then((res) => {\r\n        //alert(\"response has come from the backedn\");\r\n        this.setState(\r\n          {\r\n            displayName: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n            repeatPassword: \"\",\r\n            loading: false,\r\n            errors: null,\r\n          },\r\n          () => {\r\n            this.props.history.push(\"/\");\r\n          }\r\n        );\r\n      })\r\n      .catch((apiError) => {\r\n        console.log(apiError.response.data.errors);\r\n        let errors = [];\r\n        for (let key in apiError.response.data.errors) {\r\n          console.log(key, apiError.response.data.errors[key]);\r\n          errors.push({\r\n            on: key,\r\n            message: apiError.response.data.errors[key],\r\n          });\r\n        }\r\n        this.setState({\r\n          displayName: \"\",\r\n          username: \"\",\r\n          password: \"\",\r\n          repeatPassword: \"\",\r\n          loading: false,\r\n          errors: errors,\r\n        });\r\n      });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"UserSignUpPage component unmounted\");\r\n  }\r\n\r\n  render() {\r\n    console.log(\"UserSignUpPage Render method\");\r\n\r\n    //let content = <Spinner />;\r\n    let content = (\r\n      <div className=\"spinner-border\" role=\"status\">\r\n        <span className=\"sr-only\"></span>\r\n      </div>\r\n    );\r\n\r\n    if (!this.state.loading) {\r\n      content = (\r\n        <div className=\"container\">\r\n          <h1 className=\"text-center\">SignUp</h1>\r\n          <div className=\"col-12 mb-3\">\r\n            <label>Display Name</label>\r\n            <input\r\n              className=\"form-control\"\r\n              placeholder=\"Your Display Name\"\r\n              value={this.state.displayName}\r\n              onChange={this.displayNameHandler}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 mb-3\">\r\n            <label>Username</label>\r\n            <input\r\n              className=\"form-control\"\r\n              placeholder=\"Your Username\"\r\n              onChange={this.usernameHandler}\r\n              value={this.state.username}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 mb-3\">\r\n            <label>Password</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"password\"\r\n              placeholder=\"Your Password\"\r\n              onChange={this.passwordHandler}\r\n              value={this.state.password}\r\n            />\r\n          </div>\r\n          <div className=\"col-12 mb-3\">\r\n            <label>Repeat Password</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"password\"\r\n              placeholder=\"Repeat Your Password\"\r\n              onChange={this.repeatPasswordHandler}\r\n              value={this.state.repeatPassword}\r\n            />\r\n          </div>\r\n          <button\r\n            disabled={this.state.loading}\r\n            className=\"btn btn-primary text-center\"\r\n            onClick={this.signUpHandler}\r\n          >\r\n            SignUp\r\n          </button>\r\n          <div>\r\n            {this.state.errors\r\n              ? this.state.errors.map((err) => (\r\n                  <p key={err.message}>\r\n                    {err.on} : {err.message}\r\n                  </p>\r\n                ))\r\n              : null}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div>{content}</div>;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    actions: {\r\n      postSignUp: (userdata) => dispatch(authActions.onSignUpHandler(userdata)),\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(UserSignUpPage);\r\n","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\api\\apicalls.js",[],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\UI\\Spinners.js",[],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\LoginPage.js",[],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\HomePage.js",[],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\UserPage.js",["101"],"import React, { Component } from \"react\";\r\nimport * as apiCalls from \"../api/apicalls\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport { connect } from \"react-redux\";\r\nimport HoaxFeed from \"./HoaxFeed\";\r\nimport Spinner from \"../UI/Spinners\";\r\n\r\nclass UserPage extends Component {\r\n  state = {\r\n    user: undefined,\r\n    isLoading: false,\r\n    inEditMode: false,\r\n    originalDisplayName: undefined,\r\n    pendingUpdateCall: false,\r\n    image: undefined,\r\n    errors: {},\r\n  };\r\n\r\n  clickHandler = (event) => {\r\n    this.setState({\r\n      inEditMode: true,\r\n    });\r\n  };\r\n\r\n  onFileSelect = (event) => {\r\n    if (event.target.files.length === 0) {\r\n      return;\r\n    }\r\n    const file = event.target.files[0];\r\n    let reader = new FileReader();\r\n    reader.onload = () => {\r\n      this.setState({\r\n        image: reader.result,\r\n      });\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  onClickCancel = (event) => {\r\n    const user = this.state.user;\r\n    user.displayName =\r\n      this.state.originalDisplayName != undefined\r\n        ? this.state.originalDisplayName\r\n        : user.displayName;\r\n    this.setState({\r\n      inEditMode: false,\r\n      user: user,\r\n      image: undefined,\r\n    });\r\n  };\r\n\r\n  onClickSave = () => {\r\n    this.setState({\r\n      pendingUpdateCall: true,\r\n    });\r\n    const userUpdate = {\r\n      displayName: this.state.user.displayName,\r\n      image: this.state.image.split(\",\")[1],\r\n    };\r\n\r\n    apiCalls\r\n      .updateUser(this.props.loggedInUser.id, userUpdate)\r\n      .then((res) => {\r\n        const user = { ...this.state.user };\r\n        user.image = this.state.image;\r\n        this.setState(\r\n          {\r\n            inEditMode: false,\r\n            originalDisplayName: undefined,\r\n            pendingUpdateCall: false,\r\n            user: user,\r\n            image: undefined,\r\n          },\r\n          () => {\r\n            const action = {\r\n              type: \"update-success\",\r\n              payload: user,\r\n            };\r\n            this.props.dispatch(action);\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        let errors = {};\r\n        if (error.response.data.validationErrors) {\r\n          errors = error.response.data.validationErrors;\r\n        }\r\n        this.setState({\r\n          pendingUpdateCall: false,\r\n          errors,\r\n        });\r\n      });\r\n  };\r\n\r\n  onChangeDisplayName = (event) => {\r\n    const user = { ...this.state.user };\r\n    if (this.state.originalDisplayName === undefined) {\r\n      this.setState({\r\n        originalDisplayName: user.displayName,\r\n      });\r\n    }\r\n    user.displayName = event.target.value;\r\n    this.setState({\r\n      user: user,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    const username = this.props.match.params.username;\r\n    if (!username) return;\r\n    this.loadUser();\r\n  }\r\n\r\n  loadUser = () => {\r\n    const username = this.props.match.params.username;\r\n    this.setState({\r\n      userNotFound: false,\r\n      isLoading: true,\r\n    });\r\n    apiCalls\r\n      .getUser(username)\r\n      .then((res) => {\r\n        console.log(\"user data from api call getuserbyusername\", res.data);\r\n        this.setState({\r\n          user: res.data,\r\n          isLoading: false,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          userNotFound: true,\r\n          isLoading: false,\r\n        });\r\n      });\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    console.log(this.props);\r\n    if (!this.props.match.params.username) return;\r\n    if (this.props.match.params.username !== prevProps.match.params.username) {\r\n      this.loadUser();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"printing the state before rendering to ui\", this.state.user);\r\n    console.log(\r\n      \"printing the username from the route\",\r\n      this.props.match.params.username\r\n    );\r\n    let content = null;\r\n    if (this.state.isLoading) {\r\n      content = <Spinner />;\r\n    }\r\n    if (this.state.user) {\r\n      const isEditable =\r\n        this.props.loggedInUser.username === this.props.match.params.username;\r\n      content = (\r\n        <ProfileCard\r\n          user={this.state.user}\r\n          isEditable={isEditable}\r\n          inEditMode={this.state.inEditMode}\r\n          onClickEdit={this.clickHandler}\r\n          onClickCancel={this.onClickCancel}\r\n          onClickSave={this.onClickSave}\r\n          onChangeDisplayName={this.onChangeDisplayName}\r\n          pendingUpdateCall={this.state.pendingUpdateCall}\r\n          loadedImage={this.state.image}\r\n          onFileSelect={this.onFileSelect}\r\n          errors={this.state.errors}\r\n        />\r\n      );\r\n    } else if (this.state.userNotFound) {\r\n      content = (\r\n        <div className=\"alert alert-danger text-center\">\r\n          <div className=\"alert-heading\">\r\n            <i className=\"fas fa-exclamation-triangle fa-3x\" />\r\n          </div>\r\n          <h5>User Not Found</h5>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        {content}\r\n        <div className=\"row\">\r\n          <HoaxFeed user={this.props.match.params.username} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loggedInUser: state,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserPage);\r\n","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\Input\\TopBar.js",[],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\redux\\authReducer.js",[],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\redux\\authActions.js",[],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\UserList.js",["102"],"import React, { Component } from \"react\";\r\nimport * as apiCalls from \"../api/apicalls\";\r\nimport userListItem from \"./UserListItem\";\r\nimport UserListItem from \"./UserListItem\";\r\n\r\nclass UserList extends Component {\r\n  state = {\r\n    page: {\r\n      number: 0,\r\n      size: 3,\r\n      content: [],\r\n    },\r\n  };\r\n\r\n  loadData = (requestedPage = 0) => {\r\n    apiCalls\r\n      .listUsers({\r\n        page: requestedPage,\r\n        size: this.state.page.size,\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        this.setState({\r\n          page: response.data,\r\n          loadError: \"\",\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        this.setState({\r\n          loadError: \"Unable to load users\",\r\n        });\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  clickNextHandler = () => {\r\n    this.loadData(this.state.page.number + 1);\r\n  };\r\n\r\n  clickPreviousHandler = () => {\r\n    this.loadData(this.state.page.number - 1);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <h3 className=\"card-title m-auto\">Users</h3>\r\n        <div className=\"list-group list-group-flush\">\r\n          {this.state.page.content.map((user) => {\r\n            return <UserListItem user={user} key={user.username} />;\r\n          })}\r\n        </div>\r\n        <div>\r\n          {!this.state.page.first && (\r\n            <span\r\n              className=\"float-right\"\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={this.clickPreviousHandler}\r\n            >\r\n              {`${\"< Previous\"}`}\r\n            </span>\r\n          )}\r\n          {!this.state.page.last && (\r\n            <span\r\n              className=\"float-right\"\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={this.clickNextHandler}\r\n            >\r\n              {`${\"Next >\"}`}\r\n            </span>\r\n          )}\r\n        </div>\r\n        <div className=\"text-center text-danger\">\r\n          {this.state.loadError && <p>{this.state.loadError}</p>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserList;\r\n","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\UserListItem.js",["103"],"import React from \"react\";\r\nimport logo from \"../assets/hoaxify-logo.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ProfileImageWithDefault from \"./ProfileImageWithDefault\";\r\n\r\nconst userListItem = (props) => {\r\n  let imageSource = logo;\r\n  if (props.user.image) {\r\n    //imageSource = `/images/profile/${props.user.image}`;\r\n  }\r\n  return (\r\n    <Link\r\n      to={\"/\" + props.user.username}\r\n      className=\"user-group-item list-group-item-action\"\r\n    >\r\n      <ProfileImageWithDefault\r\n        className=\"rounded-circle\"\r\n        alt=\"profile\"\r\n        width=\"32\"\r\n        height=\"32\"\r\n        image={props.user.image}\r\n      />\r\n      <span className=\"pl-2\">\r\n        {`${props.user.displayName}@${props.user.username}`}\r\n      </span>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default userListItem;\r\n","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\ProfileCard.js",["104"],"import React from \"react\";\r\nimport ProfilePic from \"../assets/profile.png\";\r\nimport ProfileImageWithDefault from \"./ProfileImageWithDefault\";\r\n\r\nconst profileCard = (props) => {\r\n  const { username, displayName } = props.user;\r\n  const showEditButton = props.isEditable && !props.inEditMode;\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header text-center\">\r\n        <ProfileImageWithDefault\r\n          alt=\"profile\"\r\n          width=\"200\"\r\n          height=\"200\"\r\n          image={props.user.image}\r\n          src={props.loadedImage}\r\n          className=\"rounded-circle shadow\"\r\n        />\r\n      </div>\r\n      <div className=\"card-body text-center\">\r\n        {!props.inEditMode && <h4>{`${displayName}@${username}`}</h4>}\r\n        <br />\r\n        {/* {props.inEditMode && (\r\n          \r\n        )} */}\r\n        <br />\r\n        {props.inEditMode && (\r\n          <div>\r\n            <label>Change the displayname for the user {`${username}`}</label>\r\n            <input\r\n              className=\"mb-2\"\r\n              value={displayName}\r\n              onChange={props.onChangeDisplayName}\r\n            />\r\n            <input\r\n              className=\"form-control-file mt-2\"\r\n              type=\"file\"\r\n              onChange={props.onFileSelect}\r\n            />\r\n          </div>\r\n        )}\r\n        <br />\r\n        {showEditButton && (\r\n          <button\r\n            className=\"btn btn-outline-success\"\r\n            onClick={props.onClickEdit}\r\n          >\r\n            <i className=\"fas fa-user-edit\" />\r\n            Edit\r\n          </button>\r\n        )}\r\n        {props.inEditMode && (\r\n          <div>\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={props.onClickSave}\r\n              disabled={props.pendingUpdateCall}\r\n            >\r\n              <i className=\"fas fa-save\" />\r\n              Save\r\n            </button>\r\n            <button\r\n              className=\"btn btn-outline-secondary ml-1\"\r\n              onClick={props.onClickCancel}\r\n              disabled={props.pendingUpdateCall}\r\n            >\r\n              <i className=\"fas fa-window-close\" />\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default profileCard;\r\n","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\ProfileImageWithDefault.js",["105"],"import React from \"react\";\r\nimport profileImg from \"../assets/profile.png\";\r\n\r\nconst ProfileImageWithDefault = (props) => {\r\n  let defaultImg = profileImg;\r\n  if (props.image) {\r\n    //defaultImg = `/images/profile/${props.image}`;\r\n  }\r\n  return (\r\n    <img\r\n      {...props}\r\n      src={defaultImg}\r\n      alt=\"image\"\r\n      onError={(event) => {\r\n        event.target.src = defaultImg;\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProfileImageWithDefault;\r\n","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\HoaxSubmit.js",["106"],"import React, { Component } from \"react\";\r\nimport InputComponent from \"../Input/input\";\r\nimport ProfileImageWithDefault from \"./ProfileImageWithDefault\";\r\nimport { connect } from \"react-redux\";\r\nimport * as apiCalls from \"../api/apicalls\";\r\n\r\nclass HoaxSubmit extends Component {\r\n  state = {\r\n    focused: false,\r\n    content: \"\",\r\n    pendingApiCall: false,\r\n    errors: {},\r\n    file: undefined,\r\n    image: undefined,\r\n    attachment: undefined,\r\n  };\r\n\r\n  resetState = () => {\r\n    this.setState({\r\n      focused: false,\r\n      content: \"\",\r\n      pendingApiCall: false,\r\n      errors: {},\r\n      file: undefined,\r\n      image: undefined,\r\n      attachment: undefined,\r\n    });\r\n  };\r\n\r\n  onClickHoaxify = (event) => {\r\n    this.setState({\r\n      pendingApiCall: true,\r\n    });\r\n    const body = {\r\n      content: this.state.content,\r\n      attachment: this.state.attachment,\r\n    };\r\n    apiCalls\r\n      .postHoax(body, {\r\n        username: this.props.loggedInUser.username,\r\n        password: this.props.loggedInUser.password,\r\n      })\r\n      .then((res) => {\r\n        this.resetState();\r\n      })\r\n      .catch((error) => {\r\n        let errors = {};\r\n\r\n        if (error.response.data && error.response.data.errors) {\r\n          errors = error.response.data.errors;\r\n        }\r\n        this.setState({\r\n          focused: false,\r\n          content: \"\",\r\n          pendingApiCall: false,\r\n          errors,\r\n        });\r\n\r\n        console.log(\"errors from post hoax\", this.state.errors);\r\n      });\r\n  };\r\n\r\n  onChangeContent = (event) => {\r\n    const content = event.target.value;\r\n    this.setState({\r\n      content,\r\n      errors: {},\r\n    });\r\n  };\r\n\r\n  onFocus = () => {\r\n    this.setState({\r\n      focused: true,\r\n    });\r\n  };\r\n\r\n  onCancelButtonClick = () => {\r\n    this.setState({\r\n      focused: false,\r\n      content: \"\",\r\n      errors: {},\r\n      file: undefined,\r\n      image: undefined,\r\n    });\r\n  };\r\n\r\n  onFileSelect = (event) => {\r\n    if (event.target.files.length === 0) {\r\n      return;\r\n    }\r\n    const file = event.target.files[0];\r\n    let reader = new FileReader();\r\n    reader.onload = () => {\r\n      this.setState(\r\n        {\r\n          image: reader.result,\r\n          file,\r\n        },\r\n        () => {\r\n          this.uploadFile();\r\n        }\r\n      );\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  uploadFile = () => {\r\n    const body = new FormData();\r\n    body.append(\"file\", this.state.file);\r\n    apiCalls.postHoaxFile(body).then((response) => {\r\n      this.setState({\r\n        attachment: response.data,\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let textAreaClassName = \"form-control w-100\";\r\n    if (this.state.errors.content) {\r\n      textAreaClassName += \" is-invalid\";\r\n    }\r\n    return (\r\n      <div className=\"card d-flex flex-row p-1\">\r\n        <ProfileImageWithDefault\r\n          className=\"rounded-circle m-1\"\r\n          width=\"32\"\r\n          height=\"32\"\r\n          image={this.props.loggedInUser.image}\r\n        />\r\n        <div className=\"flex-fill\">\r\n          <textarea\r\n            className={textAreaClassName}\r\n            rows={this.state.focused ? 3 : 1}\r\n            onFocus={this.onFocus}\r\n            onChange={this.onChangeContent}\r\n            value={this.state.content}\r\n          />\r\n          {this.state.errors.content && (\r\n            <span className=\"invalid-feedback\">\r\n              {this.state.errors.content}\r\n            </span>\r\n          )}\r\n          {this.state.focused && (\r\n            <div>\r\n              <div className=\"pt-1\">\r\n                <InputComponent type=\"file\" onChanged={this.onFileSelect} />\r\n                {this.state.image && (\r\n                  <img\r\n                    src={this.state.image}\r\n                    width=\"128\"\r\n                    height=\"64\"\r\n                    className=\"mt-1 img-thumbnail\"\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className=\"text-right mt-1\">\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  onClick={this.onClickHoaxify}\r\n                  disabled={this.state.pendingApiCall}\r\n                >\r\n                  Hoaxify\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-danger ml-1\"\r\n                  onClick={this.resetState}\r\n                  disabled={this.state.pendingApiCall}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loggedInUser: state,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(HoaxSubmit);\r\n","D:\\java_spring\\frontend-hoaxies\\frontend\\src\\Input\\input.js",[],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\HoaxFeed.js",[],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\pages\\HoaxView.js",["107"],"D:\\java_spring\\frontend-hoaxies\\frontend\\src\\UI\\Modal.js",["108","109"],{"ruleId":"110","severity":1,"message":"111","line":36,"column":5,"nodeType":"112","messageId":"113","endLine":36,"endColumn":19},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"110","severity":1,"message":"118","line":3,"column":13,"nodeType":"112","messageId":"113","endLine":3,"endColumn":21},{"ruleId":"119","severity":1,"message":"120","line":57,"column":29,"nodeType":"121","messageId":"122","endLine":57,"endColumn":31},{"ruleId":"119","severity":1,"message":"123","line":42,"column":38,"nodeType":"121","messageId":"122","endLine":42,"endColumn":40},{"ruleId":"110","severity":1,"message":"124","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":20},{"ruleId":"110","severity":1,"message":"125","line":7,"column":7,"nodeType":"112","messageId":"113","endLine":7,"endColumn":18},{"ruleId":"110","severity":1,"message":"126","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":18},{"ruleId":"127","severity":1,"message":"128","line":10,"column":5,"nodeType":"129","endLine":17,"endColumn":7},{"ruleId":"130","severity":1,"message":"131","line":148,"column":19,"nodeType":"129","endLine":153,"endColumn":21},{"ruleId":"127","severity":1,"message":"128","line":47,"column":13,"nodeType":"129","endLine":47,"endColumn":32},{"ruleId":"110","severity":1,"message":"132","line":9,"column":7,"nodeType":"112","messageId":"113","endLine":9,"endColumn":15},{"ruleId":"110","severity":1,"message":"133","line":10,"column":7,"nodeType":"112","messageId":"113","endLine":10,"endColumn":19},"no-unused-vars","'persistedState' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["134"],"no-negated-in-lhs",["135"],"'apiCalls' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'userListItem' is defined but never used.","'imageSource' is assigned a value but never used.","'ProfilePic' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'okButton' is assigned a value but never used.","'cancelButton' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]